# @bot.command()
# async def ovr(ctx, rating=100, league="", number=10):
#     # await ctx.send("Updating...")
#     a = SoccerGuru()
#     league = league.upper()
#     player_dict = a.unload_pickle()
#     player_dict = a.filter(player_dict, rating, league, "")
#     overall_list = list(player_dict.keys())
#     overall_list.sort()
#     overall_list = reversed(overall_list)
#     memberlist = []
#     for i in range(number):
#         try:
#             overall = next(overall_list)
#             for j in range(0, len(player_dict[overall])):
#                 player = player_dict[overall][j]
#                 memberlist.append(
#                     f"{str(overall)} {player[2]} {player[0]} {player[1]} {player[4]}")
#         except Exception as e:
#             print(e)
#             break
#     if len(memberlist) == 0:

#         await ctx.send("No player found ! DM <@!333070457278562306> for more info")
#     else:
#         memberlist = [f"```Top {league} {rating} cards:"] + memberlist
#         await ctx.send("\n".join(memberlist)+"```")

# @bot.command()
# async def rnpage(ctx, nation="ENG", rating=99, number=10):
#     # await ctx.send("Updating...")
#     nation = nation.upper()
#     nations = {'ENG': "14",
#                'FRA': "18",
#                "GER": "21",
#                "SPA": "45",
#                'NED': '34',
#                'POR': '38',
#                'ITA': '27',
#                'ARG': '52',
#                'BRA': '54',
#                'BEL': '7',
#                'DEL': '13',
#                'MEX': '83',
#                'URU': '60',
#                'CRO': '10',
#                'RUS': '40',
#                }
#     nation_code = nations.get(nation, None)
#     if nation_code is None:
#         legit_nation = list(nations.keys())
#         embed = discord.Embed()
#         inner = '\n'.join(legit_nation)
#         embed.add_field(
#             name="You should enter the following nations:", value=inner, inline=False)

#         await ctx.send(embed=embed)
#     else:
#         a = SoccerGuru()
#         player_dict = a.unload_pickle()
#         player_dict = a.filter(player_dict, rating, "", nation_code)
#         overall_list = list(player_dict.keys())
#         overall_list.sort()
#         overall_list = reversed(overall_list)
#         memberlist = []
#         count = 0
#         while count < min(number, 25):
#             try:
#                 overall = next(overall_list)
#                 for j in range(0, len(player_dict[overall])):
#                     player = player_dict[overall][j]
#                     memberlist.append(
#                         f"{str(overall)} {player[2]} {player[0]} {player[1]} {player[4]}")
#                     count += 1
#             except Exception as e:
#                 print(e)
#                 break
#         if len(memberlist) == 0:

#             await ctx.send("No player found ! DM <@!333070457278562306> for more info")
#         else:
#             memberlist = [
#                 f"```Top {number} {nation} {rating} cards: "] + memberlist
#             await ctx.send("\n".join(memberlist)+"```")

@bot.command()
async def pages(ctx):
    contents = ["This is page 1!", "This is page 2!",
                "This is page 3!", "This is page 4!"]
    pages = 4
    cur_page = 1
    message = await ctx.send(f"Page {cur_page}/{pages}:\n{contents[cur_page-1]}")
    # getting the message object for editing and reacting

    await message.add_reaction("◀️")
    await message.add_reaction("▶️")

    def check(reaction, user):
        return user == ctx.author and str(reaction.emoji) in ["◀️", "▶️"]
        # This makes sure nobody except the command sender can interact with the "menu"

    while True:
        try:
            reaction, user = await bot.wait_for("reaction_add", timeout=60, check=check)
            # waiting for a reaction to be added - times out after x seconds, 60 in this
            # example

            if str(reaction.emoji) == "▶️" and cur_page != pages:
                cur_page += 1
                await message.edit(content=f"Page {cur_page}/{pages}:\n{contents[cur_page-1]}")
                await message.remove_reaction(reaction, user)

            elif str(reaction.emoji) == "◀️" and cur_page > 1:
                cur_page -= 1
                await message.edit(content=f"Page {cur_page}/{pages}:\n{contents[cur_page-1]}")
                await message.remove_reaction(reaction, user)

            else:
                await message.remove_reaction(reaction, user)
                # removes reactions if the user tries to go forward on the last page or
                # backwards on the first page
        except asyncio.TimeoutError:
            await message.delete()
            break
            # ending the loop if user doesn't react after x seconds
            
# @bot.command()
# async def roles(ctx):
#     print(", ".join([str(r.id)+str(r.name) for r in ctx.guild.roles]))


# @bot.event
# async def on_message(message):
#     if message.content.startswith('sclaim'):
#         channel = bot.get_channel(907838283600515133)
#         messages = await channel.history(limit=200).flatten()
#         print(messages)
        # guild = message.guild
        # for channel in guild.channels:
        #     if str(channel.type) == 'text':
        #         print(channel.name, channel.id)

        # message = await channel.fetch_message(951172294737264661)
        # embed_msg = message.embeds[0]
        # pattern = r'([``])(?:(?=(\\?))\2.)*?\1'
        # m1 = re.search(pattern, embed_msg.description)
        # embed_msg.description += f"[jump]({message.jump_url})"
        # await message.channel.send(embed =embed_msg)
    # try:
    #     if m1:
    #         price = int(m1.group().replace(",","").replace("`",""))
    #         player = embed_msg.title.split()[0]
    #         print(player, price)
    #         # await message.channel.send(f"CLAIM-ALERT <@!{message.author.id}> đã claim được `{player}` giá `{price}` lúc <t:{math.floor(datetime.timestamp(message.created_at))}:f>py")
    #     else:
    #         await message.channel.send(embed =embed_msg)
    # except Exception as e:
    #     print(e)
    # if message.content.startswith('"claim'):
    # channel = message.channel

    # def check(m):

    #     if str(m.author.id) == "668075833780469772" and m.channel == channel:
    #         return True

    # msg = await bot.wait_for('message', check=check)
    # embed = msg.embeds[0];
    # await channel.send(embed=embed
    # )